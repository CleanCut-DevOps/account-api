name: Deploy Account API to Digitalocean
run-name: ${{ github.actor }} is testing the application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.24.0
        with:
          php-version: "8.1.3"
          extensions: curl, fileinfo, openssl, pdo_mysql, mbstring, intl
          ini-values: post_max_size=8M, max_execution_time=30
          coverage: xdebug
          tools: php-cs-fixer, phpunit

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run composer install
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Initialize env
        run: |
          cp .env.example .env
          echo APP_ENV="${{ secrets.APP_ENV }}" > .env
          echo APP_KEY="${{ secrets.APP_KEY }}" > .env
          echo APP_URL="${{ secrets.APP_URL }}" > .env
          echo DB_HOST="${{ secrets.DB_HOST }}" >> .env
          echo DB_PORT="${{ secrets.DB_PORT }}" >> .env
          echo DB_USERNAME="${{ secrets.DB_USERNAME }}" >> .env
          echo DB_PASSWORD="${{ secrets.DB_PASSWORD }}" >> .env
          echo MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" >> .env
          echo MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" >> .env
          echo MAIL_FROM_ADDRESS="${{ secrets.MAIL_FROM_ADDRESS }}" >> .env
          echo JWT_SECRET="${{ secrets.JWT_SECRET }}" >> .env
          echo ACCOUNT_API="${{ secrets.ACCOUNT_API }}" >> .env
          echo PROPERTY_API="${{ secrets.PROPERTY_API }}" >> .env
          echo BOOKING_API="${{ secrets.BOOKING_API }}" >> .env
          echo SESSION_API="${{ secrets.SESSION_API }}" >> .env
          echo REVIEW_API="${{ secrets.REVIEW_API }}" >> .env
          php artisan config:cache

      - name: Run tests
        run: php artisan test

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: test
    if: always() && needs.test.result == 'success'
    steps:
      - name: Run update command
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: ${{ secrets.DROPLET_USERNAME }}
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd /var/www/account-api
            git pull origin main
            composer install -n --prefer-dist
            echo APP_ENV="${{ secrets.APP_ENV }}" > .env
            echo APP_KEY="${{ secrets.APP_KEY }}" > .env
            echo APP_URL="${{ secrets.APP_URL }}" > .env
            echo DB_HOST="${{ secrets.DB_HOST }}" >> .env
            echo DB_PORT="${{ secrets.DB_PORT }}" >> .env
            echo DB_USERNAME="${{ secrets.DB_USERNAME }}" >> .env
            echo DB_PASSWORD="${{ secrets.DB_PASSWORD }}" >> .env
            echo MAIL_USERNAME="${{ secrets.MAIL_USERNAME }}" >> .env
            echo MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}" >> .env
            echo MAIL_FROM_ADDRESS="${{ secrets.MAIL_FROM_ADDRESS }}" >> .env
            echo JWT_SECRET="${{ secrets.JWT_SECRET }}" >> .env
            echo ACCOUNT_API="${{ secrets.ACCOUNT_API }}" >> .env
            echo PROPERTY_API="${{ secrets.PROPERTY_API }}" >> .env
            echo BOOKING_API="${{ secrets.BOOKING_API }}" >> .env
            echo SESSION_API="${{ secrets.SESSION_API }}" >> .env
            echo REVIEW_API="${{ secrets.REVIEW_API }}" >> .env
            php artisan config:cache
            sudo certbot renew
            sudo service nginx restart
            sudo systemctl reload nginx
